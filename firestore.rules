
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwnUserDocument(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Data for the currently authenticated user
    function authenticatedUserData() {
      return isAuthenticated() ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data : null;
    }

    // Data for a specific farm
    function farmData(farmId) {
      return (farmId != null && farmId != "") ? get(/databases/$(database)/documents/farms/$(farmId)).data : null;
    }

    // Is the requesting user the owner of the specified farm?
    // userId here is expected to be request.auth.uid
    function isOwnerOf(farmId) { 
      let fData = farmData(farmId);
      return isAuthenticated() && fData != null && fData.ownerId == request.auth.uid;
    }
    
    // Does the requesting user have a specific role on the specified farm?
    // This relies on the user's own document (`roleOnCurrentFarm` and `farmId`).
    // userId here is request.auth.uid
    function hasRoleOnFarm(currentFarmId, targetRole) {
        let userData = authenticatedUserData();
        return isAuthenticated() && 
               userData != null &&
               userData.farmId == currentFarmId &&
               userData.roleOnCurrentFarm == targetRole;
    }
    
    // Is the requesting user an Admin on the specified farm?
    function isAdminOnFarm(currentFarmId) {
        return hasRoleOnFarm(currentFarmId, 'admin');
    }

    // Is the requesting user an Editor on the specified farm?
    function isEditorOnFarm(currentFarmId) {
        return hasRoleOnFarm(currentFarmId, 'editor');
    }
    
    // Is the requesting user a Viewer on the specified farm?
    function isViewerOnFarm(currentFarmId) {
        return hasRoleOnFarm(currentFarmId, 'viewer');
    }

    // Does the user have general access to this farm (owner or any valid staff role)?
    // Relies on user's own document correctly reflecting their farmId and role.
    // userId here is request.auth.uid
    function hasGeneralAccessToFarm(currentFarmId) {
        let userData = authenticatedUserData();
        return isAuthenticated() &&
               userData != null &&
               userData.farmId == currentFarmId && // Their current farm context must be this farm
               (isOwnerOf(currentFarmId) || 
                isAdminOnFarm(currentFarmId) || 
                isEditorOnFarm(currentFarmId) || 
                isViewerOnFarm(currentFarmId));
    }

    // This function checks if the user's primary farmId (from their user document) matches the document's farmId
    // AND that they have general access (owner or any staff role) to that farm.
    // userId here is request.auth.uid
    function isAssociatedWithAndHasAccessToDocFarm(docFarmId) {
      let authUserData = authenticatedUserData();
      return isAuthenticated() &&
             authUserData != null &&
             authUserData.farmId == docFarmId &&
             hasGeneralAccessToFarm(docFarmId); // Pass docFarmId to hasGeneralAccessToFarm
    }
    
    // For creating new farm-specific documents:
    // Does the farmId in the new document match the user's current farmId?
    // userId here is request.auth.uid
    function newDocFarmIdMatchesUserCurrentFarm() {
      let authUserData = authenticatedUserData();
      return isAuthenticated() &&
             authUserData != null &&
             request.resource.data.farmId == authUserData.farmId;
    }

    // Users Collection (/users/{userId})
    match /users/{userId} {
      allow create: if isOwnUserDocument(userId);
      allow read: if isOwnUserDocument(userId);
      allow update: if isOwnUserDocument(userId) &&
                      request.resource.data.keys().hasOnly([
                        'name', 'farmName', 'updatedAt', 
                        'selectedPlanId', 'subscriptionStatus', 'stripeCustomerId', 'stripeSubscriptionId', 'subscriptionCurrentPeriodEnd',
                        'settings', 
                        'farmId', 'isFarmOwner', 'roleOnCurrentFarm' // These should ideally only be updated by trusted backend
                      ]) &&
                      // farmName on user doc can only be changed by the owner of *that specific farm*
                      (request.resource.data.farmName == resource.data.farmName || isOwnerOf(resource.data.farmId)) &&
                      // More restrictive: client cannot change these association/role fields easily.
                      // API routes using Admin SDK are responsible for setting these during invite accept/staff removal.
                      // Allow update only if they are NOT changing these sensitive fields from their existing values,
                      // OR if they are resetting to their own personal farm.
                      ( (request.resource.data.farmId == resource.data.farmId &&
                         request.resource.data.isFarmOwner == resource.data.isFarmOwner &&
                         request.resource.data.roleOnCurrentFarm == resource.data.roleOnCurrentFarm) ||
                        // Scenario: User being removed from a farm and reset to their personal farm by an API route (Admin SDK)
                        // This specific condition is hard to write perfectly for client-side if it were allowed.
                        // Best to assume API routes handle complex state changes for farmId/isFarmOwner/roleOnCurrentFarm.
                        // For now, we primarily lock them down for client-side direct update.
                        (request.resource.data.farmId == userId && request.resource.data.isFarmOwner == true && request.resource.data.roleOnCurrentFarm in ['free', 'pro', 'agribusiness'])
                      );
      allow delete: if false;
      allow list: if false;
    }

    // Farms Collection (/farms/{farmId})
    match /farms/{farmId} {
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
      allow read: if isAuthenticated() && hasGeneralAccessToFarm(farmId);
      allow update: if isAuthenticated() &&
                      (
                        // Owner can update farmName, staff, latitude, longitude
                        (isOwnerOf(farmId) && 
                         request.resource.data.keys().hasOnly(['farmName', 'staff', 'updatedAt', 'ownerId', 'farmId', 'latitude', 'longitude'])) ||
                        // Admin can update staff list
                        (isAdminOnFarm(farmId) && 
                         request.resource.data.keys().hasOnly(['staff', 'updatedAt']) &&
                         request.resource.data.farmName == resource.data.farmName && // Admin cannot change farmName
                         request.resource.data.ownerId == resource.data.ownerId      // Admin cannot change owner
                        )
                      ) &&
                      request.resource.data.ownerId == resource.data.ownerId && // No one changes ownerId client-side
                      request.resource.data.farmId == resource.data.farmId;     // No one changes farm document ID client-side

      allow delete: if isAuthenticated() && isOwnerOf(farmId); // Only owner can delete farm
      allow list: if false;
    }

    // --- Generic Rule for Farm-Specific Data Collections ---
    function canReadFarmSpecificDoc(docFarmId) {
      return isAssociatedWithAndHasAccessToDocFarm(docFarmId);
    }
    function canCreateFarmSpecificDoc(docFarmId) {
      return newDocFarmIdMatchesUserCurrentFarm() && 
             (isOwnerOf(docFarmId) || isAdminOnFarm(docFarmId) || isEditorOnFarm(docFarmId));
    }
    function canUpdateFarmSpecificDoc(docFarmId) {
      return isAssociatedWithAndHasAccessToDocFarm(docFarmId) &&
             request.resource.data.farmId == resource.data.farmId && // FarmId of doc cannot change
             (isOwnerOf(docFarmId) || isAdminOnFarm(docFarmId) || isEditorOnFarm(docFarmId));
    }
    function canDeleteFarmSpecificDoc(docFarmId) {
      return isAssociatedWithAndHasAccessToDocFarm(docFarmId) &&
             (isOwnerOf(docFarmId) || isAdminOnFarm(docFarmId));
    }

    // Applying generic rules to each collection
    match /fields/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /plantingLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /harvestingLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /soilDataLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /weatherLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /taskLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /farmInputs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /farmEquipment/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /expenseLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /revenueLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /fertilizerLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /irrigationLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /livestockAnimals/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /livestockHealthLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /livestockBreedingRecords/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
     match /livestockFeedLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /livestockWeightLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }

    // Pending Invitations Collection (/pendingInvitations/{invitationId})
    match /pendingInvitations/{invitationId} {
      allow create: if isAuthenticated() &&
                      (isOwnerOf(request.resource.data.inviterFarmId) || isAdminOnFarm(request.resource.data.inviterFarmId) ) &&
                      request.resource.data.inviterUid == request.auth.uid;
      allow read: if isAuthenticated() && authenticatedUserData() != null &&
                    ( (resource.data.invitedUserUid == request.auth.uid && resource.data.status == 'pending') ||
                      (resource.data.invitedEmail.lower() == authenticatedUserData().email.lower() && resource.data.status == 'pending') || 
                      ( (isOwnerOf(resource.data.inviterFarmId) || isAdminOnFarm(resource.data.inviterFarmId)) && resource.data.inviterUid == request.auth.uid) );
      allow update: if false; 
      allow delete: if false; 
      allow list: if isAuthenticated();
    }
  }
}

    