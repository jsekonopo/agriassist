
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwnUserDocument(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getAuthenticatedUserData() {
      return isAuthenticated() ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data : null;
    }

    function getFarmData(farmId) {
      return (farmId != null && farmId != "") ? get(/databases/$(database)/documents/farms/$(farmId)).data : null;
    }

    function isOwnerOfFarm(farmId, userId) {
      let farmDocData = getFarmData(farmId);
      return isAuthenticated() && userId != null && farmDocData != null && farmDocData.ownerId == userId;
    }
    
    function hasRoleOnFarm(userId, currentFarmId, targetRole) {
        let userData = getAuthenticatedUserData(); 
        return isAuthenticated() && 
               userData != null &&
               userData.uid == userId && 
               userData.farmId == currentFarmId &&
               userData.roleOnCurrentFarm == targetRole;
    }
    
    function isAdminOnFarm(currentFarmId) { // Checks for the requesting user
        return hasRoleOnFarm(request.auth.uid, currentFarmId, 'admin');
    }

    function isEditorOnFarm(currentFarmId) { // Checks for the requesting user
        return hasRoleOnFarm(request.auth.uid, currentFarmId, 'editor');
    }
    
    function isViewerOnFarm(currentFarmId) { // Checks for the requesting user
        return hasRoleOnFarm(request.auth.uid, currentFarmId, 'viewer');
    }

    function hasGeneralAccessToFarm(currentFarmId) { // For the requesting user
        return isAuthenticated() &&
               authenticatedUserData() != null &&
               authenticatedUserData().farmId == currentFarmId &&
               (isOwnerOfFarm(currentFarmId, request.auth.uid) || 
                isAdminOnFarm(currentFarmId) || 
                isEditorOnFarm(currentFarmId) || 
                isViewerOnFarm(currentFarmId));
    }

    function isAssociatedWithAndHasAccessToDocFarm(docFarmId) { // For the requesting user
      return isAuthenticated() &&
             getAuthenticatedUserData() != null &&
             getAuthenticatedUserData().farmId == docFarmId &&
             hasGeneralAccessToFarm(docFarmId);
    }
    
    function newDocFarmIdMatchesUserCurrentFarm() { // For the requesting user
      return isAuthenticated() &&
             getAuthenticatedUserData() != null &&
             request.resource.data.farmId == getAuthenticatedUserData().farmId;
    }

    // Users Collection (/users/{userId})
    match /users/{userId} {
      allow create: if isOwnUserDocument(userId);
      allow read: if isOwnUserDocument(userId);
      allow update: if isOwnUserDocument(userId) &&
                      request.resource.data.keys().hasOnly([
                        'name', 'farmName', 'updatedAt', 
                        'selectedPlanId', 'subscriptionStatus', 'stripeCustomerId', 'stripeSubscriptionId', 'subscriptionCurrentPeriodEnd',
                        'settings', 'roleOnCurrentFarm', 'farmId', 'isFarmOwner' // API routes update role/farmId/isFarmOwner
                      ]) &&
                      (request.resource.data.farmName == resource.data.farmName || isOwnerOfFarm(resource.data.farmId, request.auth.uid)) &&
                      // Client cannot change these directly if they are not an owner changing their *own* farm association (rare)
                      // These are mainly managed by API routes for staff invites/removals
                      (request.resource.data.farmId == resource.data.farmId || request.auth.uid == userId) && 
                      (request.resource.data.isFarmOwner == resource.data.isFarmOwner || request.auth.uid == userId) &&
                      (request.resource.data.roleOnCurrentFarm == resource.data.roleOnCurrentFarm || request.auth.uid == userId);
      allow delete: if false;
      allow list: if false;
    }

    // Farms Collection (/farms/{farmId})
    match /farms/{farmId} {
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
      allow read: if isAuthenticated() && hasGeneralAccessToFarm(farmId);
      allow update: if isAuthenticated() &&
                      (
                        (isOwnerOfFarm(farmId, request.auth.uid) && request.resource.data.keys().hasOnly(['farmName', 'staff', 'updatedAt', 'ownerId', 'farmId', 'latitude', 'longitude'])) ||
                        (isAdminOnFarm(farmId) && request.resource.data.keys().hasOnly(['staff', 'updatedAt']))
                      ) &&
                      request.resource.data.ownerId == resource.data.ownerId && 
                      request.resource.data.farmId == resource.data.farmId;
      allow delete: if isAuthenticated() && isOwnerOfFarm(farmId, request.auth.uid);
      allow list: if false;
    }

    function canReadFarmSpecificDoc(docFarmId) {
      return isAssociatedWithAndHasAccessToDocFarm(docFarmId);
    }
    function canCreateFarmSpecificDoc(docFarmId) {
      return newDocFarmIdMatchesUserCurrentFarm() &&
             (isOwnerOfFarm(docFarmId, request.auth.uid) || isAdminOnFarm(docFarmId) || isEditorOnFarm(docFarmId));
    }
    function canUpdateFarmSpecificDoc(docFarmId) {
      return isAssociatedWithAndHasAccessToDocFarm(docFarmId) &&
             request.resource.data.farmId == resource.data.farmId && 
             (isOwnerOfFarm(docFarmId, request.auth.uid) || isAdminOnFarm(docFarmId) || isEditorOnFarm(docFarmId));
    }
    function canDeleteFarmSpecificDoc(docFarmId) {
      return isAssociatedWithAndHasAccessToDocFarm(docFarmId) &&
             (isOwnerOfFarm(docFarmId, request.auth.uid) || isAdminOnFarm(docFarmId));
    }

    match /{collectionId}/{docId}
      where collectionId in ['fields', 'plantingLogs', 'harvestingLogs', 'soilDataLogs', 'weatherLogs', 'taskLogs', 'farmInputs', 'farmEquipment', 'expenseLogs', 'revenueLogs', 'fertilizerLogs', 'irrigationLogs', 'livestockAnimals', 'livestockHealthLogs', 'livestockBreedingRecords'] {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }

    // Notifications Collection (/notifications/{notificationId})
    match /notifications/{notificationId} {
      // Backend (API route using Admin SDK) creates notifications. Client should not create.
      allow create: if false; 
      
      // User can read their own notifications.
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // User can update only the isRead and readAt fields of their own notifications.
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid &&
                      request.resource.data.keys().hasOnly(['isRead', 'readAt']) &&
                      request.resource.data.userId == resource.data.userId; // Cannot change who it's for
      
      // Client should not delete notifications. Maybe an admin function later.
      allow delete: if false;
      
      // Allow listing for client-side queries (e.g., where('userId', '==', auth.uid))
      allow list: if isAuthenticated();
    }

    // Pending Invitations Collection (/pendingInvitations/{invitationId})
    match /pendingInvitations/{invitationId} {
      allow create: if isAuthenticated() &&
                      (isOwnerOfFarm(request.resource.data.inviterFarmId, request.auth.uid) || isAdminOnFarm(request.resource.data.inviterFarmId) ) &&
                      request.resource.data.inviterUid == request.auth.uid;
      allow read: if isAuthenticated() && authenticatedUserData() != null &&
                    ( (resource.data.invitedUserUid == request.auth.uid && resource.data.status == 'pending') ||
                      (resource.data.invitedEmail.lower() == authenticatedUserData().email.lower() && resource.data.status == 'pending') || 
                      ( (isOwnerOfFarm(resource.data.inviterFarmId, request.auth.uid) || isAdminOnFarm(resource.data.inviterFarmId)) && resource.data.inviterUid == request.auth.uid) );
      allow update: if false; 
      allow delete: if false; 
      allow list: if isAuthenticated();
    }
  }
}
