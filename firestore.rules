
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwnUserDocument(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getAuthenticatedUserData() {
      return isAuthenticated() ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data : null;
    }

    function getFarmData(farmId) {
      return (farmId != null && farmId != "") ? get(/databases/$(database)/documents/farms/$(farmId)).data : null;
    }

    function isOwnerOfFarm(farmId, userId) {
      let farmDocData = getFarmData(farmId);
      return isAuthenticated() && userId != null && farmDocData != null && farmDocData.ownerId == userId;
    }
    
    function hasRoleOnFarm(userId, currentFarmId, targetRole) {
        let userData = getAuthenticatedUserData(); 
        return isAuthenticated() && 
               userData != null &&
               userData.uid == userId && 
               userData.farmId == currentFarmId &&
               userData.roleOnCurrentFarm == targetRole;
    }
    
    function isAdminOnFarm(currentFarmId) { // Checks for the requesting user
        return hasRoleOnFarm(request.auth.uid, currentFarmId, 'admin');
    }

    function isEditorOnFarm(currentFarmId) { // Checks for the requesting user
        return hasRoleOnFarm(request.auth.uid, currentFarmId, 'editor');
    }
    
    function isViewerOnFarm(currentFarmId) { // Checks for the requesting user
        return hasRoleOnFarm(request.auth.uid, currentFarmId, 'viewer');
    }

    function hasGeneralAccessToFarm(userId, currentFarmId) {
        let authUserData = getAuthenticatedUserData(); 
        return isAuthenticated() &&
               authUserData != null &&
               authUserData.uid == userId &&
               authUserData.farmId == currentFarmId && 
               (isOwnerOfFarm(currentFarmId, userId) || 
                isAdminOnFarm(currentFarmId) || 
                isEditorOnFarm(currentFarmId) || 
                isViewerOnFarm(currentFarmId));
    }

    function isAssociatedWithAndHasAccessToDocFarm(docFarmId, userId) {
      let authUserData = getAuthenticatedUserData();
      return isAuthenticated() && 
             authUserData != null &&
             authUserData.farmId == docFarmId && 
             hasGeneralAccessToFarm(userId, docFarmId);
    }
    
    function newDocFarmIdMatchesUserCurrentFarm(userId) {
      let authUserData = getAuthenticatedUserData();
      return isAuthenticated() && 
             authUserData != null &&
             request.resource.data.farmId == authUserData.farmId;
    }

    // Users Collection (/users/{userId})
    match /users/{userId} {
      allow create: if isOwnUserDocument(userId);
      allow read: if isOwnUserDocument(userId);
      allow update: if isOwnUserDocument(userId) &&
                      request.resource.data.keys().hasOnly([
                        'name', 'farmName', 'updatedAt', 
                        'selectedPlanId', 'subscriptionStatus', 'stripeCustomerId', 'stripeSubscriptionId', 'subscriptionCurrentPeriodEnd',
                        'settings' 
                      ]) &&
                      (request.resource.data.farmName == resource.data.farmName || isOwnerOfFarm(resource.data.farmId, request.auth.uid)) &&
                      request.resource.data.farmId == resource.data.farmId && 
                      request.resource.data.isFarmOwner == resource.data.isFarmOwner &&
                      request.resource.data.roleOnCurrentFarm == resource.data.roleOnCurrentFarm;
      allow delete: if false;
      allow list: if false;
    }

    // Farms Collection (/farms/{farmId})
    match /farms/{farmId} {
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
      allow read: if isAuthenticated() && hasGeneralAccessToFarm(request.auth.uid, farmId);
      allow update: if isAuthenticated() &&
                      (
                        (isOwnerOfFarm(farmId, request.auth.uid) && request.resource.data.keys().hasOnly(['farmName', 'staff', 'updatedAt', 'ownerId', 'farmId', 'latitude', 'longitude'])) ||
                        (isAdminOnFarm(farmId) && request.resource.data.keys().hasOnly(['staff', 'updatedAt']))
                      ) &&
                      request.resource.data.ownerId == resource.data.ownerId && 
                      request.resource.data.farmId == resource.data.farmId;
      allow delete: if isAuthenticated() && isOwnerOfFarm(farmId, request.auth.uid);
      allow list: if false;
    }

    // --- Generic Rule for Farm-Specific Data Collections ---
    function canReadFarmSpecificDoc(docFarmId) {
      return isAssociatedWithAndHasAccessToDocFarm(docFarmId, request.auth.uid);
    }
    function canCreateFarmSpecificDoc(docFarmId) {
      return newDocFarmIdMatchesUserCurrentFarm(request.auth.uid) && 
             (isOwnerOfFarm(docFarmId, request.auth.uid) || isAdminOnFarm(docFarmId) || isEditorOnFarm(docFarmId));
    }
    function canUpdateFarmSpecificDoc(docFarmId) {
      return isAssociatedWithAndHasAccessToDocFarm(docFarmId, request.auth.uid) &&
             request.resource.data.farmId == resource.data.farmId && 
             (isOwnerOfFarm(docFarmId, request.auth.uid) || isAdminOnFarm(docFarmId) || isEditorOnFarm(docFarmId));
    }
    function canDeleteFarmSpecificDoc(docFarmId) {
      return isAssociatedWithAndHasAccessToDocFarm(docFarmId, request.auth.uid) &&
             (isOwnerOfFarm(docFarmId, request.auth.uid) || isAdminOnFarm(docFarmId));
    }

    match /fields/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      // Allow latitude and longitude to be written on create and update
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId) &&
                      request.resource.data.keys().hasAll(['fieldName', 'farmId', 'userId', 'createdAt']) &&
                      request.resource.data.keys().hasOnly(['fieldName', 'farmId', 'userId', 'createdAt', 'fieldSize', 'fieldSizeUnit', 'latitude', 'longitude', 'notes']);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId) &&
                      request.resource.data.keys().hasOnly(['fieldName', 'fieldSize', 'fieldSizeUnit', 'latitude', 'longitude', 'notes', 'updatedAt']); // farmId, userId, createdAt should not change
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /plantingLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /harvestingLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /soilDataLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /weatherLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /taskLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /farmInputs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /farmEquipment/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /expenseLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /revenueLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /fertilizerLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /irrigationLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /livestockAnimals/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /livestockHealthLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /livestockBreedingRecords/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
     match /livestockFeedLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }
    match /livestockWeightLogs/{docId} {
      allow list: if isAuthenticated();
      allow read: if canReadFarmSpecificDoc(resource.data.farmId);
      allow create: if canCreateFarmSpecificDoc(request.resource.data.farmId);
      allow update: if canUpdateFarmSpecificDoc(resource.data.farmId);
      allow delete: if canDeleteFarmSpecificDoc(resource.data.farmId);
    }

    // Pending Invitations Collection (/pendingInvitations/{invitationId})
    match /pendingInvitations/{invitationId} {
      allow create: if isAuthenticated() &&
                      (isOwnerOfFarm(request.resource.data.inviterFarmId, request.auth.uid) || isAdminOnFarm(request.resource.data.inviterFarmId) ) &&
                      request.resource.data.inviterUid == request.auth.uid;
      allow read: if isAuthenticated() && authenticatedUserData() != null &&
                    ( (resource.data.invitedUserUid == request.auth.uid && resource.data.status == 'pending') ||
                      (resource.data.invitedEmail.lower() == authenticatedUserData().email.lower() && resource.data.status == 'pending') || 
                      ( (isOwnerOfFarm(resource.data.inviterFarmId, request.auth.uid) || isAdminOnFarm(resource.data.inviterFarmId)) && resource.data.inviterUid == request.auth.uid) );
      allow update: if false; 
      allow delete: if false; 
      allow list: if isAuthenticated();
    }
  }
}

    